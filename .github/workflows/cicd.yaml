name: Deploy Application Docker Image to EC2 (ECR ➜ EC2)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1                   # 改成你的区域
  ECR_REPOSITORY: medicalbot              # 改成你的仓库名（与 ECR 控制台一致）
  CONTAINER_NAME: medicalbot              # EC2 上运行的容器名
  APP_PORT: "8080"                        # 容器对外端口
  HEALTHCHECK_URL: "http://localhost:8080/health"  # 你的健康检查接口

jobs:
  Continuous-Integration:
    name: Build & Push Image to ECR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Ensure ECR repository exists (idempotent)
        run: |
          aws ecr describe-repositories --repository-names "${{ env.ECR_REPOSITORY }}" >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name "${{ env.ECR_REPOSITORY }}"

      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
          tags: |
            type=raw,value=latest
            type=sha

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Export image URI
        run: |
          echo "IMAGE_URI=${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}@${{ steps.meta.outputs.digest }}" >> "$GITHUB_OUTPUT"
        id: export

  Continuous-Deployment:
    name: Deploy on EC2 (self-hosted runner)
    needs: Continuous-Integration
    runs-on: self-hosted   # 你的 EC2 需要已注册为 GitHub 自托管 runner
    env:
      IMAGE_LATEST: ${{ needs.Continuous-Integration.outputs.IMAGE_URI }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Pull latest image
        run: |
          REG="${{ steps.amazon-ecr-login.outputs.registry }}"
          REPO="${{ env.ECR_REPOSITORY }}"
          docker pull "$REG/$REPO:latest"

      - name: Stop & remove old container if exists (idempotent)
        run: |
          docker ps -a --format '{{.Names}}' | grep -w '${{ env.CONTAINER_NAME }}' && \
            docker rm -f '${{ env.CONTAINER_NAME }}' || true

      - name: Run container
        run: |
          REG="${{ steps.amazon-ecr-login.outputs.registry }}"
          REPO="${{ env.ECR_REPOSITORY }}"
          docker run -d \
            --name "${{ env.CONTAINER_NAME }}" \
            --restart unless-stopped \
            -p ${{ env.APP_PORT }}:${{ env.APP_PORT }} \
            -e AWS_DEFAULT_REGION=${{ env.AWS_REGION }} \
            -e PINECONE_API_KEY=${{ secrets.PINECONE_API_KEY }} \
            -e OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
            "$REG/$REPO:latest"

      - name: Health check
        run: |
          for i in {1..30}; do
            curl -fsS "${{ env.HEALTHCHECK_URL }}" && exit 0
            echo "Waiting for service… ($i/30)"
            sleep 2
          done
          echo "Service failed health check"
          docker logs "${{ env.CONTAINER_NAME }}"
          exit 1
